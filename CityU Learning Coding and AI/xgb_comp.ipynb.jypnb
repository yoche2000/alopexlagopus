{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"xgb_comp.ipynb","provenance":[],"authorship_tag":"ABX9TyNTS/a953V9Fb4w3a3ZH9di"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ucg7jpYhWJZW","colab_type":"code","outputId":"c3017070-bc2b-4bd3-d567-4a3722c47e96","executionInfo":{"status":"ok","timestamp":1581009491629,"user_tz":-480,"elapsed":784,"user":{"displayName":"UC Studio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDoBjlmQBugU9Q4QU1JTCb7rYJ7DblnO-wdDgIBFg=s64","userId":"14723455999994731185"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["# Un-defenition the two following lines if using Colab\n","# from google.colab import drive\n","# drive.mount('/content/drive/')"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fhzsUhkpV-Wk","colab_type":"code","outputId":"9400f4b7-dc5e-4bac-918d-044ad8374595","executionInfo":{"status":"ok","timestamp":1581007965275,"user_tz":-480,"elapsed":5261,"user":{"displayName":"UC Studio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDoBjlmQBugU9Q4QU1JTCb7rYJ7DblnO-wdDgIBFg=s64","userId":"14723455999994731185"}},"colab":{"base_uri":"https://localhost:8080/","height":104}},"source":["! pip install xgboost graphviz\n","import numpy as np\n","import pandas as pd\n","pd.set_option('display.max_columns', 500)\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import confusion_matrix, accuracy_score, \\\n","precision_score, recall_score, f1_score, roc_curve, roc_auc_score, auc\n","from matplotlib import pyplot as plt\n","plt.style.use('seaborn')\n","import seaborn as sns\n","from datetime import datetime #for calculating running time\\\n","from xgboost import XGBClassifier"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xgboost in /usr/local/lib/python3.6/dist-packages (0.90)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.17.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.4.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tygs-m0JZ9nf","colab_type":"code","outputId":"5aff1f88-4765-4507-8bc2-eed3d2a81fa6","executionInfo":{"status":"ok","timestamp":1581007995167,"user_tz":-480,"elapsed":633,"user":{"displayName":"UC Studio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDoBjlmQBugU9Q4QU1JTCb7rYJ7DblnO-wdDgIBFg=s64","userId":"14723455999994731185"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Un-defenition the following line if using Colab\n","# cd '/content/drive/My Drive/src'"],"execution_count":12,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/src\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_YksALWUWPuO","colab_type":"code","colab":{}},"source":["#Data pre-processing\n","RAND_SEED = 41\n","\n","df = pd.read_csv('UCI_Credit_Card.csv')\n","df['default.payment.next.month'].value_counts(normalize=True)\n","\n","x_train, x_test, y_train, y_test = train_test_split(\n","    df.drop(['ID', 'default.payment.next.month'], axis=1),\n","    df[['default.payment.next.month']],\n","    test_size = 0.3,\n","    random_state = 41,\n",")\n","y_train = y_train.values.ravel()  #dataframe to np.array\n","y_test = y_test.values.ravel()    #dataframe to np.array\n","x_train = x_train.astype(np.float64)\n","x_test = x_test.astype(np.float64)\n","\n","cate_features = ['EDUCATION','SEX','MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6'] #categorical and ordinal features\n","scaler =  StandardScaler() #initiate the StandardScaler\n","x_train_s = scaler.fit_transform( x_train.drop(cate_features, axis=1) ) #fit the scaler with train set numerical data and then transform it\n","x_test_s = scaler.transform( x_test.drop(cate_features, axis=1) )#transofrm the test set\n","x_train_s = np.hstack([x_train_s, x_train[cate_features].values])# combine x_train_s with categorical and orindal features\n","x_test_s = np.hstack([x_test_s, x_test[cate_features].values]) # combine x_test_s with categorical and orindal features"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LJrtjcqxXJPW","colab_type":"code","colab":{}},"source":["def print_confusion_matrix(confusion_matrix, class_names, figsize = (6,5)):\n","  df_cm = pd.DataFrame(\n","      confusion_matrix, index=class_names, columns=class_names, \n","  )\n","  fig = plt.figure(figsize=figsize)\n","  try:\n","      heatmap = sns.heatmap(df_cm, annot=True, fmt=\"d\", cmap='Reds')\n","  except ValueError:\n","      raise ValueError(\"Confusion matrix values must be integers.\")\n","  heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=20)\n","  heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=20)\n","  plt.title('Confusion matrix', fontsize=25)\n","  plt.ylabel('True label', fontsize=17)\n","  plt.xlabel('Predicted label', fontsize=17)\n","  return fig\n","  \n","\n","def evaluate_model(y_true, y_pred, y_pred_prob):\n","  '''\n","  y_true: a numpy array of true class label, containing 0 and 1\n","  y_pred: a numpy array of predicted class label, containing 0 and 1\n","  y_pred_prob: a numpy array of predicted probability of belonging to a class\n","  '''  \n","    \n","  tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()\n","  cm = np.array([tp,fn,fp,tn]).reshape(2,2)\n","  acc = accuracy_score(y_true, y_pred)\n","  precision = precision_score(y_true, y_pred)\n","  recall = recall_score(y_true, y_pred)\n","  f1 = f1_score(y_true, y_pred)\n","  roc_auc = roc_auc_score(y_true, y_pred_prob)\n","\n","  print('Accuracy:  %.3f'%acc)\n","  print('Precision: %.3f'%precision)\n","  print('Recall:    %.3f'%recall)\n","  print('F1 Score:  %.3f'%f1)\n","  print('AUC score: %.3f \\n'%roc_auc)\n","\n","#comp is a function to compare the preformance of two models\n","def comp(ya_true, ya_pred, ya_pred_prob, yb_true, yb_pred, yb_pred_prob):\n","  tn, fp, fn, tp = confusion_matrix(ya_true, ya_pred).ravel()\n","  cm = np.array([tp,fn,fp,tn]).reshape(2,2)\n","  acc = accuracy_score(ya_true, ya_pred)\n","  precision = precision_score(ya_true, ya_pred)\n","  recall = recall_score(ya_true, ya_pred)\n","  f1 = f1_score(ya_true, ya_pred)\n","  roc_auc = roc_auc_score(ya_true, ya_pred_prob)\n","\n","  tnb, fpb, fnb, tpb = confusion_matrix(yb_true, yb_pred).ravel()\n","  cmb = np.array([tpb,fnb,fpb,tnb]).reshape(2,2)\n","  accb = accuracy_score(yb_true, yb_pred)\n","  precisionb = precision_score(yb_true, yb_pred)\n","  recallb = recall_score(yb_true, yb_pred)\n","  f1b = f1_score(yb_true, yb_pred)\n","  roc_aucb = roc_auc_score(yb_true, yb_pred_prob)\n","\n","  print('           A       B')\n","  print('Accuracy:  %.3f   %.3f'%(acc,accb))\n","  print('Precision: %.3f   %.3f'%(precision,precisionb))\n","  print('Recall:    %.3f   %.3f'%(recall,recallb))\n","  print('F1 Score:  %.3f   %.3f'%(f1,f1b))\n","  print('AUC score: %.3f   %.3f \\n'%(roc_auc,roc_aucb))  \n","\n","#runmod is a function to run the comparing process \n","def runmod(moda,modb):\n","  start = datetime.now()\n","  moda.fit(x_train_s, y_train)\n","  time_elapsed = datetime.now() - start\n","  print('Model A Time elapsed:',time_elapsed)\n","\n","  start2 = datetime.now()\n","  modb.fit(x_train_s, y_train)\n","  time_elapsed2 = datetime.now() - start2\n","  print('Model B Time elapsed:',time_elapsed2,'\\n')\n","\n","  y_train_preda = moda.predict(x_train_s)#predict class for x_train_s\n","  y_train_pred_proba = moda.predict_proba(x_train_s)#predict probability of class 1 for x_train_s\n","  y_test_preda =  moda.predict(x_test_s)#predict class for x_test_s\n","  y_test_pred_proba =  moda.predict_proba(x_test_s) #predict probability of class 1 for x_test_s\n","\n","  y_train_predb = modb.predict(x_train_s)#predict class for x_train_s\n","  y_train_pred_probb = modb.predict_proba(x_train_s)#predict probability of class 1 for x_train_s\n","  y_test_preda =  moda.predict(x_test_s)#predict class for x_test_s\n","  y_test_pred_probb =  moda.predict_proba(x_test_s) #predict probability of class 1 for x_test_s\n","\n","  comp(y_train, y_train_preda,y_train_pred_proba[:,1],\n","       y_train, y_train_predb,y_train_pred_probb[:,1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R16MKoHBbKxy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":185},"outputId":"735b277b-dd8b-4393-8ea7-e406a08e5f60","executionInfo":{"status":"ok","timestamp":1581008854930,"user_tz":-480,"elapsed":12969,"user":{"displayName":"UC Studio","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDoBjlmQBugU9Q4QU1JTCb7rYJ7DblnO-wdDgIBFg=s64","userId":"14723455999994731185"}}},"source":["#Set two models\n","mod1 = XGBClassifier(\n","    objective = 'binary:logistic',\n","    min_child_weight = 1,\n","    learning_rate = 0.1,\n","    max_depth = 10,\n","    reg_lambda = 0,\n","    reg_alpha = 0,\n","    tree_method = 'auto',\n","    random_state=RAND_SEED\n",")\n","\n","mod2 = XGBClassifier(\n","    objective = 'binary:logistic',\n","    min_child_weight = 1,\n","    learning_rate = 0.1,\n","    reg_alpha = 0,\n","    reg_lambda = 0,\n","    max_depth = 4,\n","    tree_method = 'auto',\n","    random_state=RAND_SEED\n",")\n","\n","#Insert two models to compare\n","runmod(mod1,mod2)\n"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Model A Time elapsed: 0:00:08.268478\n","Model B Time elapsed: 0:00:02.921460 \n","\n","           A       B\n","Accuracy:  0.933   0.831\n","Precision: 0.982   0.722\n","Recall:    0.710   0.382\n","F1 Score:  0.824   0.500\n","AUC score: 0.987   0.827 \n","\n"],"name":"stdout"}]}]}